{"version":3,"sources":["api/Forecast.js","api/config.js","components/Card.js","App.js","index.js"],"names":["getForecast","city","a","fetchURL","axios","response","data","console","log","error","Card","useState","isLoading","setIsLoading","setCity","dataWeather","setDataWeather","showForecast","useEffect","className","onChange","e","target","value","onClick","preventDefault","forecast","forecastday","map","item","index","Fragment","date","moment","format","src","day","condition","icon","alt","text","mintemp_c","current","temp_c","avgtemp_c","maxtemp_c","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAIMA,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACVC,EADU,UCHQ,oDDGR,OCJG,kCDIH,cACgCF,EADhC,6BAGWG,IAAMD,GAHjB,cAGNE,EAHM,gBAIOA,EAASC,KAJhB,cAINA,EAJM,OAKZC,QAAQC,IAAI,YAAaF,GALb,kBAMLA,GANK,2DASL,CAAEG,OAAO,IATJ,0DAAH,sD,wBEAJC,EAAO,WAAO,IAAD,IACxB,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAS,wCAAjC,mBAAOV,EAAP,KAAaa,EAAb,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAEMC,EAAY,uCAAG,WAAOhB,GAAP,eAAAC,EAAA,6DACnBW,GAAa,GADM,SAEAb,EAAYC,GAFZ,OAEbK,EAFa,OAGnBO,GAAa,GACbG,EAAe,aACbD,eACGT,IANc,2CAAH,sDAelBY,qBAAU,WACRD,EAAahB,KAEZ,IAWH,OACE,sBAAKkB,UAAU,OAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,uBAAMA,UAAU,OAAhB,UACE,uBAAOA,UAAU,aAAaC,SAbjB,SAACC,GACpBP,EAAQO,EAAEC,OAAOC,QAY2CA,MAAOtB,IAC7D,wBAAQkB,UAAU,kBAAkBK,QAV3B,SAACH,GAChBA,EAAEI,iBACFR,EAAahB,IAQP,yBAGJ,sBAAKkB,UAAU,eAAf,UACGJ,EAAYN,OAAS,wFACrBG,EACC,2CADQ,OAGRG,QAHQ,IAGRA,GAHQ,UAGRA,EAAaW,gBAHL,iBAGR,EAAuBC,mBAHf,aAGR,EAAoCC,KAAI,SAACC,EAAMC,GAC7C,OACE,cAAC,IAAMC,SAAP,UACE,sBAAKZ,UAAU,eAAf,UACE,sBAAKA,UAAU,mBAAf,UACa,IAAVW,EAAc,sCAAe,6BArChCE,EAqC2CH,EAAKG,KApClDC,IAAOD,GAAME,OAAO,WAqChB,qBAAKC,IAAKN,EAAKO,IAAIC,UAAUC,KAAMC,IAAKV,EAAKO,IAAIC,UAAUG,UAE7D,sBAAKrB,UAAU,2BAAf,UACE,oBAAGA,UAAU,mBAAb,UAAiCU,EAAKO,IAAIK,UAAU,uBAAM,0CAC/C,IAAVX,EACC,oBAAGX,UAAU,wCAAb,UAAsDJ,EAAY2B,QAAQC,OAAO,uBAAM,8CACvF,oBAAGxB,UAAU,wCAAb,UAAsDU,EAAKO,IAAIQ,UAAU,uBAAM,8CAEjF,oBAAGzB,UAAU,mBAAb,UAAiCU,EAAKO,IAAIS,UAAU,uBAAM,iDAZ3Cf,GAlClB,IAACE,YCNHc,EAXH,WACV,OACE,sBAAK3B,UAAU,UAAf,UACE,iCACE,2CAEF,cAAC,EAAD,QCHN4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.73de5961.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { API_KEY } from './config'\r\nimport { API_BASE_URL } from './config'\r\n\r\nconst getForecast = async (city) => {\r\n    const fetchURL = `${API_BASE_URL}${API_KEY}&q=${city}&days=3`\r\n    try {\r\n        const response = await axios(fetchURL)\r\n        const data = await response.data\r\n        console.log('data ==> ', data)\r\n        return data\r\n    }\r\n    catch {\r\n        return { error: true }\r\n    }\r\n}\r\n\r\nexport { getForecast }\r\n","export const API_KEY = \"12a20f85151e42448cb175826212010\";\r\nexport const API_BASE_URL = 'https://api.weatherapi.com/v1/forecast.json?key='","import React, { useState, useEffect } from \"react\";\r\nimport { getForecast } from '../api/Forecast'\r\nimport moment from 'moment';\r\n\r\nexport const Card = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [city, setCity] = useState('Одесса');\r\n  const [dataWeather, setDataWeather] = useState({});\r\n\r\n  const showForecast = async (city) => {\r\n    setIsLoading(true);\r\n    const data = await getForecast(city)\r\n    setIsLoading(false);\r\n    setDataWeather({\r\n      dataWeather,\r\n      ...data,\r\n    })\r\n  }\r\n\r\n  const getDay = (date) => {\r\n    const day = moment(date).format('dddd')\r\n    return day\r\n  }\r\n\r\n  useEffect(() => {\r\n    showForecast(city)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const handleChange = (e) => {\r\n    setCity(e.target.value)\r\n  }\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault()\r\n    showForecast(city)\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-top-section\">\r\n        <form className=\"form\">\r\n          <input className=\"form-input\" onChange={handleChange} value={city} />\r\n          <button className=\"form-search-btn\" onClick={onSubmit}>Search</button>\r\n        </form>\r\n      </div>\r\n      <div className=\"days-section\">\r\n        {dataWeather.error && <p>Incorrect request. Please, enter the correct city name.</p>}\r\n        {isLoading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          dataWeather?.forecast?.forecastday?.map((item, index) => {\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <div className=\"info-section\">\r\n                  <div className=\"info-section-day\">\r\n                    {index === 0 ? <p>Today</p> : <p>{getDay(item.date)}</p>}\r\n                    <img src={item.day.condition.icon} alt={item.day.condition.text} />\r\n                  </div>\r\n                  <div className=\"info-section-temperature\">\r\n                    <p className=\"text-temperature\">{item.day.mintemp_c}<br /><span>Min</span></p>\r\n                    {index === 0 ?\r\n                      <p className=\"text-temperature text-temperature-big\">{dataWeather.current.temp_c}<br /><span>Current</span></p> :\r\n                      <p className=\"text-temperature text-temperature-big\">{item.day.avgtemp_c}<br /><span>Average</span></p>\r\n                    }\r\n                    <p className=\"text-temperature\">{item.day.maxtemp_c}<br /><span>Max</span></p>\r\n                  </div>\r\n                </div>\r\n              </React.Fragment>\r\n            )\r\n          })\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Card } from './components/Card'\n\nconst App = () => {\n  return (\n    <div className='wrapper'>\n      <header>\n        <h1>Weather</h1>\n      </header>\n      <Card />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}