{"version":3,"sources":["api/Forecast.js","components/Card.js","App.js","index.js"],"names":["forecastDaily","forecast","a","days","fetchURL","axios","response","data","console","log","forecastday","temp_avg","day","avgtemp_c","mintemp_c","maxtemp_c","icon_url","condition","icon","newData","city","location","name","temp_current","current","temp_c","today","Card","useState","isLoading","setIsLoading","state","setState","useEffect","getWeather","className","toUpperCase","onClick","src","alt","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAMMA,EAAa,uCAAG,WAAOC,GAAP,iCAAAC,EAAA,sDACJ,QACG,WACQ,qBAHP,KAKVD,EALU,OACJ,UADI,OAED,aAFC,OAGO,uBAHP,uCAgBVE,EAAO,EAhBG,mCAUVA,EAAO,EAVG,oCAaVA,EAAO,EAbG,oCAmBZC,EAnBY,UAFV,oDAEU,OAJN,kCAIM,eAHT,YAGS,iBAmBmCD,GAnBnC,UAoBKE,IAAMD,GApBX,eAoBZE,EApBY,iBAqBCA,EAASC,KArBV,eAqBZA,EArBY,OAsBlBC,QAAQC,IAAI,YAAaF,GACnBG,EAAcP,EAAO,EACrBQ,EAAWJ,EAAKN,SAASS,YAAYA,GAAaE,IAAIC,UACtDC,EAAYP,EAAKN,SAASS,YAAYA,GAAaE,IAAIE,UACvDC,EAAYR,EAAKN,SAASS,YAAYA,GAAaE,IAAIG,UACvDC,EAAWT,EAAKN,SAASS,YAAYA,GAAaE,IAAIK,UAAUC,KAEhEC,EAAU,CACZlB,SAAUA,EACVmB,KAAMb,EAAKc,SAASC,KACpBC,aAAchB,EAAKiB,QAAQC,OAC3Bd,SAAUA,EACVG,UAAWA,EACXC,UAAWA,EACXC,SAAUA,GApCI,kBAsCXG,GAtCW,4CAAH,sD,OCHbO,EAAQ,QAIDC,EAAO,WAClB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,CACjC3B,SAAU,GACVmB,KAAM,GACNG,aAAc,GACdZ,SAAU,GACVG,UAAW,GACXC,UAAW,GACXC,SAAU,KAPZ,mBAAOe,EAAP,KAAcC,EAAd,KAUAC,qBAAU,WACRC,EAAWR,KAEV,IAEH,IAAMQ,EAAU,uCAAG,WAAOjC,GAAP,eAAAC,EAAA,6DACjB4B,GAAa,GADI,SAEE9B,EAAcC,GAFhB,OAEXM,EAFW,OAGjBuB,GAAa,GACbE,EAAS,2BACJD,GACAxB,IANY,2CAAH,sDAUhB,OACE,sBAAK4B,UAAU,OAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,6BAAKJ,EAAMX,KAAKgB,gBAChB,sBAAKD,UAAU,kBAAf,UACE,wBAAQA,UAAU,kBAAkBE,QAAS,kBAAMH,EAAWR,IAA9D,mBACA,wBAAQS,UAAU,kBAAkBE,QAAS,kBAAMH,EApC5C,aAoCP,sBACA,wBAAQC,UAAU,kBAAkBE,QAAS,kBAAMH,EApCpC,uBAoCf,sCAGJ,qBAAKC,UAAU,eAAf,SACGN,EACC,2CAEA,qCACE,qBAAKS,IAAKP,EAAMf,SAAUuB,IAAKR,EAAMX,OACrC,sBAAKe,UAAU,2BAAf,UACE,oBAAGA,UAAU,mBAAb,UAAiCJ,EAAMjB,UAAU,uBAAM,0CACtDiB,EAAM9B,WAAayB,EAClB,oBAAGS,UAAU,wCAAb,UAAsDJ,EAAMR,aAAa,uBAAM,8CAC/E,oBAAGY,UAAU,wCAAb,UAAsDJ,EAAMpB,SAAS,uBAAM,8CAE7E,oBAAGwB,UAAU,mBAAb,UAAiCJ,EAAMhB,UAAU,uBAAM,sDC3CtDyB,EAXH,WACV,OACE,sBAAKL,UAAU,UAAf,UACE,iCACE,2CAEF,cAAC,EAAD,QCHNM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.14660306.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_KEY = \"12a20f85151e42448cb175826212010\";\r\nconst city = \"Odessa,ua\";\r\nconst url = 'https://api.weatherapi.com/v1/forecast.json?key='\r\n\r\nconst forecastDaily = async (forecast) => {\r\n    const today = 'today'\r\n    const tomorrow = 'tomorrow'\r\n    const dayAfterTomorrow = 'day after tomorrow'\r\n    let days;\r\n    switch (forecast) {\r\n        case today:\r\n            days = 1\r\n            break;\r\n        case tomorrow:\r\n            days = 2\r\n            break;\r\n        case dayAfterTomorrow:\r\n            days = 3\r\n            break;\r\n        default:\r\n            days = 1\r\n            break;\r\n    }\r\n    const fetchURL = `${url}${API_KEY}&q=}${city}&days=${days}`\r\n    const response = await axios(fetchURL)\r\n    const data = await response.data\r\n    console.log('data ==> ', data)\r\n    const forecastday = days - 1;\r\n    const temp_avg = data.forecast.forecastday[forecastday].day.avgtemp_c\r\n    const mintemp_c = data.forecast.forecastday[forecastday].day.mintemp_c\r\n    const maxtemp_c = data.forecast.forecastday[forecastday].day.maxtemp_c\r\n    const icon_url = data.forecast.forecastday[forecastday].day.condition.icon\r\n\r\n    const newData = {\r\n        forecast: forecast,\r\n        city: data.location.name,\r\n        temp_current: data.current.temp_c,\r\n        temp_avg: temp_avg,\r\n        mintemp_c: mintemp_c,\r\n        maxtemp_c: maxtemp_c,\r\n        icon_url: icon_url,\r\n    };\r\n    return newData;\r\n}\r\n\r\nexport { forecastDaily }\r\n","import { useState, useEffect } from \"react\";\nimport { forecastDaily } from '../api/Forecast'\n\nconst today = 'today'\nconst tomorrow = 'tomorrow'\nconst dayAfterTomorrow = 'day after tomorrow'\n\nexport const Card = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [state, setState] = useState({\n    forecast: '',\n    city: \"\",\n    temp_current: \"\",\n    temp_avg: \"\",\n    mintemp_c: \"\",\n    maxtemp_c: \"\",\n    icon_url: \"\",\n  });\n\n  useEffect(() => {\n    getWeather(today)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const getWeather = async (forecast) => {\n    setIsLoading(true);\n    const data = await forecastDaily(forecast)\n    setIsLoading(false);\n    setState({\n      ...state,\n      ...data,\n    })\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-top-section\">\n        <h2>{state.city.toUpperCase()}</h2>\n        <div className=\"buttons-section\">\n          <button className=\"forecast-button\" onClick={() => getWeather(today)}>Today</button>\n          <button className=\"forecast-button\" onClick={() => getWeather(tomorrow)}>Tomorrow</button>\n          <button className=\"forecast-button\" onClick={() => getWeather(dayAfterTomorrow)}>Day After Tomorrow</button>\n        </div>\n      </div>\n      <div className=\"info-section\">\n        {isLoading ? (\n          <p>Loading...</p>\n        ) : (\n          <>\n            <img src={state.icon_url} alt={state.city} />\n            <div className=\"info-section-temperature\">\n              <p className=\"text-temperature\">{state.mintemp_c}<br /><span>Min</span></p>\n              {state.forecast === today ?\n                <p className=\"text-temperature text-temperature-big\">{state.temp_current}<br /><span>Current</span></p> :\n                <p className=\"text-temperature text-temperature-big\">{state.temp_avg}<br /><span>Average</span></p>\n              }\n              <p className=\"text-temperature\">{state.maxtemp_c}<br /><span>Max</span></p>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Card } from './components/Card'\n\nconst App = () => {\n  return (\n    <div className='wrapper'>\n      <header>\n        <h1>Weather</h1>\n      </header>\n      <Card />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}